# https://taskfile.dev

version: '3'

tasks:

    git:tag:patch:
      desc: Add git tag, but upgrade latest patch version
      silent: true
      cmds:
        - cmd: git tag -a "v{{ default "0" .MAJOR }}.{{ default "0" .MINOR }}.{{ default "0" .PATCH }}" -m "v{{ default "0" .MAJOR }}.{{ default "0" .MINOR }}.{{ default "0" .PATCH }}"
      vars:
        MAJOR:
          sh: git tag | sort -V | tail -1 | cut -d'v' -f2 | cut -d'.' -f1
        MINOR:
          sh: git tag | sort -V | tail -1 | cut -d'.' -f2
        PATCH:
          sh: echo "$(($(git tag | sort -V | tail -1 | cut -d'.' -f3 )+1))"
    git:tag:minor:
      desc: Add git tag, but upgrade latest minor version
      silent: true
      cmds:
        - cmd: git tag -a "v{{ default "0" .MAJOR }}.{{ default "0" .MINOR }}.{{ default "0" .PATCH }}" -m "v{{ default "0" .MAJOR }}.{{ default "0" .MINOR }}.{{ default "0" .PATCH }}"
      vars:
        MAJOR:
          sh: git tag | sort -V | tail -1 | cut -d'v' -f2 | cut -d'.' -f1
        MINOR:
          sh: echo "$(($(git tag | sort -V | tail -1 | cut -d'.' -f2 )+1))"
        PATCH: "0"
    git:tag:major:
      desc: Add git tag, upgrade latest major version
      silent: true
      cmds:
        - cmd: git tag -a "v{{ default "0" .MAJOR }}.{{ default "0" .MINOR }}.{{ default "0" .PATCH }}" -m "v{{ default "0" .MAJOR }}.{{ default "0" .MINOR }}.{{ default "0" .PATCH }}"
      vars:
        MAJOR:
          sh: echo "$(($(git tag | sort -V | tail -1 | cut -d'v' -f2 | cut -d'.' -f1 )+1))"
        MINOR: "0"
        PATCH: "0"
    git:tag:deletelatest:
      desc: Delete latest (local) tag
      silent: true
      cmds:
        - cmd: git tag -d $(git tag | sort -V | tail -1)

    release:patch:
      desc: Create new patch version tag and push
      silent: true
      cmds:
        - cmd: echo "syncing local tags with tags of origin"
        - cmd: git tag -d $(git tag -l) >/dev/null
        - cmd: git fetch origin --tags --force >/dev/null
        - task: git:tag:patch
        - cmd: printf "# Changelog\n\n- \n" > CHANGELOG.md
        - cmd: (git add CHANGELOG.md 2>/dev/null && git commit -m "Resetted changelog" >/dev/null) || (echo "Please edit the changelog first" && task global:git:tag:deletelatest && exit 1)
        - cmd: git push --follow-tags
    release:minor:
      desc: Create new minor version tag and push
      silent: true
      cmds:
        - cmd: echo "syncing local tags with tags of origin"
        - cmd: git tag -d $(git tag -l) >/dev/null
        - cmd: git fetch origin --tags --force >/dev/null
        - task: git:tag:minor
        - cmd: printf "# Changelog\n\n- \n" > CHANGELOG.md
        - cmd: (git add CHANGELOG.md 2>/dev/null && git commit -m "Resetted changelog" >/dev/null) || (echo "Please edit the changelog first" && task global:git:tag:deletelatest && exit 1)
        - cmd: git push --follow-tags
    release:major:
      desc: Create new major version tag and push
      silent: true
      cmds:
        - cmd: echo "syncing local tags with tags of origin"
        - cmd: git tag -d $(git tag -l) >/dev/null
        - cmd: git fetch origin --tags --force >/dev/null
        - task: git:tag:major
        - cmd: printf "# Changelog\n\n- \n" > CHANGELOG.md
        - cmd: (git add CHANGELOG.md 2>/dev/null && git commit -m "Resetted changelog" >/dev/null) || (echo "Please edit the changelog first" && task global:git:tag:deletelatest && exit 1)
        - cmd: git push --follow-tags

    git:branch:help:
      desc: Show common commands for git branches
      silent: true
      cmds:
        - cmd: |
            printf "%-40s%s\n" "> git branch -d <name>" "Delete local branch"
            printf "%-40s%s\n" "> git push origin --delete <name>" "Delete remote branch"
            printf "%-40s%s\n" "> git branch <name>" "Create local branch"
            printf "%-40s%s\n" "> git checkout -b <name>" "Create local branch and check it out"
    
    git:deletelatestcommitkeepchanges:
      desc: Delete latest commit (singular!) but keep changes
      silent: true
      cmds:
        - git reset "HEAD^"

    gpg:setup:
      desc: Set your gpg key up and tell git about it
      silent: true
      cmds:
        - cmd: |
            echo "%echo Generating gpg key
            Key-Type: RSA
            Key-Length: 4096
            Subkey-Type: RSA
            Subkey-Length: 4096
            Name-Real: {{ .REALNAME }}
            Name-Email: {{ .EMAIL }}
            Expire-Date: 0
            %no-protection
            # Do a commit here, so that we can later print "done" :-)
            %commit
            %echo done
            " > gpgconfig
        - cmd: gpg --batch --generate-key gpgconfig
        - cmd: rm gpgconfig
        - cmd: git config --global user.signingkey $(gpg --list-secret-keys --keyid-format LONG | grep "sec" | cut -d' ' -f4 | cut -d'/' -f2)
        - cmd: git config --global commit.gpgsign true
        - cmd: gpg --armor --export $(gpg --list-secret-keys --keyid-format LONG | grep "sec" | cut -d' ' -f4 | cut -d'/' -f2)
        - cmd: echo "Now you only need to tell github (https://github.com/settings/keys) and vscode (setting git.enableCommitSigning) about it :)"
      vars:
        REALNAME: "Till Hoffmann"
        EMAIL: "till.hoffmann@enforge.de"
