## general
- write progressive webapps instead of native apps
  - progessive webapp is like a locally cached website (with a service worker that acts as cache-controller)
    - https://developers.google.com/web/fundamentals/primers/service-workers/
    - https://developers.google.com/web/updates/2017/02/navigation-preload
    - https://developers.google.com/web/updates/2016/06/sw-readablestreams
  - f.e. let users use website and when they continue to use it they can download the progressive webapp
- use polyfills instead of vendor-specific additions
- https://github.com/elsewhencode/project-guidelines
- make page navigatable with keyboard only
  - add elements on site from left to right, so tabbing goes from top to bottom and left to right (instead of wild jumping)
  - use tabindex=-1 or =0, but NO positive values (intransparency regarding modules)
- softtabs -> spaces
- websockets
- set web performance budgets, like
  - 170kB of critical resources (130kB for sites build with js frameworks)
  - loading time under 5s on first load
  - loading time under 2s on subsequent loads

## technologies
- http/2 (one connection for multiple files)
- websockets (hold connection open and allow for server push)
- webassembly (machine code from compilable languages like Go)
  - https://webassembly.org/getting-started/developers-guide/
- https://quasar.dev/ instead of electron - as it is more lightweight
- cross-platform
  - electron
  - quasar.dev
  - neutralino.js.org
- db: graphql (client: apollo or nanographql)
- webpack/parceljs (asset bundling)
- for larger sites either vue or react

## javascript libs
- 3D
  - three.js
- SVG
  - paper.js
  - svg.js
- utility
  - lodash (modularity, performance, extras)
  - async (coalan.github.io/async)
  - socket.io
- testing
  - jestjs.io
  - cypress.io
(- frameworks)
  - next.js as react framework
  - preactjs as next-gen react

## cli tools
- webpack (webpack.js.org) -> bundle files (.js, .css, .jpg, .png)

## technologies
- webhook (webhook.site)

## headless cms
- ghost
- netlify cms
- forestry (hosted)

## api development
- postman

## svg
- https://svgontheweb.com/
- animations with web-animations https://drafts.csswg.org/web-animations/

## images
- https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images

## fonts
- lato (light text)
- use svg icons instead of font-icons
- current gold standard: CRITICAL FOFT WITH DATA URI
  - https://github.com/zachleat/web-font-loading-recipes/blob/master/critical-foft-data-uri-polyfill.html
- next gold standard: CRITICAL FOFT WITH PRELOAD
  - https://github.com/zachleat/web-font-loading-recipes/blob/master/critical-foft-preload.html
  - https://github.com/zachleat/web-font-loading-recipes/blob/master/critical-foft-preload-polyfill.html

## search engine optimization
- https://support.google.com/webmasters/answer/7451184?hl=en

## html
- https://html.spec.whatwg.org/

## styleguides
### web-app
- offline-first
  - think about disconnects
  - dont treat offline like an error (tell user something is delayed instead or change save to save locally)
  - make coming back online easier (conflict resolving / git diff)
  - use timestamps both on client and server
  - "last read" line in chronologic data like chats

### css
- use flexboxes (https://flexboxfroggy.com/)
- use grids (https://cssgridgarden.com/)
- use css custom properties for variables (https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)
  - has inheritence
  - allows for fallback/default values
  - use ":root" instead of "html" selector
  - read further on "env()"
- ITCSS order:
  1. settings (color definitions, fonts -> no direct css output)
  2. tools (global mixins/functions -> no direct css output)
  3. generic (reset/normalize)
  4. elements (bare html elements like h1,a)
  5. objects
  6. components (specific UI components - majority of code)
  7. utilities (helper class, f.e. for hiding)
- (mostly from) codeguide.co/#css (also for html etc)
  - always prefer classes (not ids or elements (e.g. 'p'))
  - co-locate component code (all files for component next to each other (js, css etc))
  - consistent class namespacing (<app>-<component>-<localname>[-function/feature] e.g. myapp-header-link[-centering])
  - naming convention (namespacing): <module>[-<component>][-<state>][--<modifier>] each in lowerCamelCase
  - strict mapping between namespaces and filenames (mirror class namespacing into folders)
  - prevent leaking styles outside the component (put app/component css into codeblock and use the app/component name as variable prefix)
  - prevent leaking styles inside the component
  - respect component boundaries
  - integrate external styles loosely
  - use semantic class names
  - css can be cached, html can't. -> move as much code from html to css as possible
  - create .globalState-<state> classes like .globalState-hidden
  - have all css files in one directory
    - optionally move css files into each module folder
  - thirdparty.css goes into vendor/
  - all application.css files go into <project>/
  - use ">" to target direct children
  - use "all: initial" as reset
- https://cssguidelin.es/

### html5 <head> elements
- recommended minimum
  - <meta charset="utf-8">
  - <meta name="viewport" content="width=device-width, initial-scale=1">
  - these two should always be the first ones
  - <title>...</title>
- base: <base href="https://mypage.com/"> -> set base for all relative urls within document
- css: <link rel="stylesheet" href="styles.css">
- js: <script src="script.js"></script>
- nojs: <noscript></noscript>
- meta
  - http-equiv="Content-Security-Policy" content="default-src 'self'"
  - name="theme-color" content="#123456" -> for firefox, chrome, opera (on mobile)
  - name="description" content="max 150 word description, may be used by search engines"
  - name="robots" content="index,follow" -> for all search engines
  - http-equiv="x-dns-prefetch-control" content="off" -> disable dns prefetching ?
- link
  - rel="amphtml" href="..."
  - rel="manifest" href="manifest.json" -> ?
  - rel="author" href="humans.txt"
  - rel="licence" href="copyright.html"
  - rel="alternative" href="https://en.page.com" hreflang="en">
  - rel="first|last|prev|next" href="..." -> how to use them?
  - rel="dns-prefetch|preconnect|prefetch|prerender|preload" href="..."
- #icons
  - favicon.ico in root directory
  - rel="icon" sizes="192x192" href="..."
- what about security headers?
- <math> mathml
- storage https://web.dev/storage-for-the-web/

### javascript
- self-contained modules -> reusability & uncouple
- dynamically load modules (features) when they're required (clicked upon)
- modules should work even if one other failed
- modules need to be testable on their own
- architecture: mediator(main controller), facade (abstract mediatior, subscribes events(success, error, etc)), modules (runs a specific task)
- https://eslint.org/docs/user-guide/getting-started

### fonts
- 


## helpers
- html character/symbol/entity lookup
  - entity-lookup.leftlogic.com
  - www.toptal.com/designers/htmlarrows
- sandboxes
  - https://codesandbox.io/
- linting
  - https://webhint.io/
- website speed
  - https://perf.rocks/